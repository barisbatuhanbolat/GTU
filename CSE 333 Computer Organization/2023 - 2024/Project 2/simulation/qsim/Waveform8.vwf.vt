// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/08/2023 22:20:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mod_dp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mod_dp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] B;
reg clk;
reg result_clr;
reg result_ld;
reg temp_clr;
reg temp_ld;
// wires                                               
wire [31:0] Result;
wire temp_lt_B;

// assign statements (if any)                          
mod_dp i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Result(Result),
	.clk(clk),
	.result_clr(result_clr),
	.result_ld(result_ld),
	.temp_clr(temp_clr),
	.temp_ld(temp_ld),
	.temp_lt_B(temp_lt_B)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #640000 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #320000 1'b1;
	A[3] = #320000 1'b0;
	A[3] = #320000 1'b1;
end 
// A[ 2 ]
initial
begin
	repeat(3)
	begin
		A[2] = 1'b0;
		A[2] = #160000 1'b1;
		# 160000;
	end
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	repeat(6)
	begin
		A[1] = 1'b0;
		A[1] = #80000 1'b1;
		# 80000;
	end
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	repeat(12)
	begin
		A[0] = 1'b0;
		A[0] = #40000 1'b1;
		# 40000;
	end
	A[0] = 1'b0;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b0;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #640000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #320000 1'b1;
	B[2] = #320000 1'b0;
	B[2] = #320000 1'b1;
end 
// B[ 1 ]
initial
begin
	repeat(3)
	begin
		B[1] = 1'b0;
		B[1] = #160000 1'b1;
		# 160000;
	end
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	repeat(6)
	begin
		B[0] = 1'b0;
		B[0] = #80000 1'b1;
		# 80000;
	end
	B[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// temp_ld
initial
begin
	repeat(3)
	begin
		temp_ld = 1'b0;
		temp_ld = #160000 1'b1;
		# 160000;
	end
	temp_ld = 1'b0;
end 

// result_ld
initial
begin
	result_ld = 1'b0;
	result_ld = #320000 1'b1;
	result_ld = #320000 1'b0;
	result_ld = #320000 1'b1;
end 

// result_clr
initial
begin
	result_clr = 1'b0;
end 

// temp_clr
initial
begin
	temp_clr = 1'b0;
end 
endmodule

