// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/18/2024 14:27:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          control_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module control_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] opCode;
// wires                                               
wire [2:0] ALUop;
wire ALUsrc;
wire addi_wire;
wire andi_wire;
wire beq_wire;
wire branch;
wire byteOperations;
wire jump;
wire jump_wire;
wire lb_wire;
wire lw_wire;
wire memRead;
wire memWrite;
wire move;
wire move_wire;
wire ori_wire;
wire regDst;
wire regWrite;
wire rtype_wire;
wire sb_wire;
wire slti_wire;
wire subtri_wire;
wire sw_wire;

// assign statements (if any)                          
control_unit i1 (
// port map - connection between master ports and signals/registers   
	.ALUop(ALUop),
	.ALUsrc(ALUsrc),
	.addi_wire(addi_wire),
	.andi_wire(andi_wire),
	.beq_wire(beq_wire),
	.branch(branch),
	.byteOperations(byteOperations),
	.jump(jump),
	.jump_wire(jump_wire),
	.lb_wire(lb_wire),
	.lw_wire(lw_wire),
	.memRead(memRead),
	.memWrite(memWrite),
	.move(move),
	.move_wire(move_wire),
	.opCode(opCode),
	.ori_wire(ori_wire),
	.regDst(regDst),
	.regWrite(regWrite),
	.rtype_wire(rtype_wire),
	.sb_wire(sb_wire),
	.slti_wire(slti_wire),
	.subtri_wire(subtri_wire),
	.sw_wire(sw_wire)
);
initial 
begin 
#1000000 $finish;
end 
// opCode[ 5 ]
initial
begin
	opCode[5] = 1'b0;
end 
// opCode[ 4 ]
initial
begin
	opCode[4] = 1'b0;
end 
// opCode[ 3 ]
initial
begin
	opCode[3] = 1'b0;
end 
// opCode[ 2 ]
initial
begin
	opCode[2] = 1'b0;
end 
// opCode[ 1 ]
initial
begin
	opCode[1] = 1'b1;
end 
// opCode[ 0 ]
initial
begin
	opCode[0] = 1'b0;
end 
endmodule

