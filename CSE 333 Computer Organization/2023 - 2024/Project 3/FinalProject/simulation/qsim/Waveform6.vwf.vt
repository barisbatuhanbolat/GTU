// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/19/2024 13:41:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mips
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mips_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire [2:0] ALUop;
wire ALUsrc;
wire [17:0] address;
wire [31:0] alu_result;
wire branch;
wire [5:0] function_code;
wire [15:0] imm;
wire [31:0] instruction2;
wire jump;
wire memRead;
wire memWrite;
wire move;
wire [5:0] opcode;
wire [31:0] read_data;
wire [31:0] read_data1;
wire [31:0] read_data2;
wire [4:0] read_reg1;
wire [4:0] read_reg2;
wire regDst;
wire regWrite;
wire [31:0] write_data;
wire [4:0] write_reg;
wire zero_bit;

// assign statements (if any)                          
mips i1 (
// port map - connection between master ports and signals/registers   
	.ALUop(ALUop),
	.ALUsrc(ALUsrc),
	.address(address),
	.alu_result(alu_result),
	.branch(branch),
	.clock(clock),
	.function_code(function_code),
	.imm(imm),
	.instruction2(instruction2),
	.jump(jump),
	.memRead(memRead),
	.memWrite(memWrite),
	.move(move),
	.opcode(opcode),
	.read_data(read_data),
	.read_data1(read_data1),
	.read_data2(read_data2),
	.read_reg1(read_reg1),
	.read_reg2(read_reg2),
	.regDst(regDst),
	.regWrite(regWrite),
	.write_data(write_data),
	.write_reg(write_reg),
	.zero_bit(zero_bit)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b1;
	clock = #40000 1'b0;
	# 40000;
	repeat(11)
	begin
		clock = 1'b1;
		clock = #40000 1'b0;
		# 40000;
	end
	clock = 1'b1;
end 
endmodule

